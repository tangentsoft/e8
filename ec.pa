/#EC# SCREEN AND MODE LINE TEXT FUNCTIONS

HALFHT=TXTHT%2

/ SET TOP OF SCREEN. SEARCH BACK LINES FROM POINT UNTIL
/   * FIND LINE CURRENTLY AT TOS. DONE, NO CHANGE
/   * REACH BEGINNING OF BUFFER. SET TOS THERE.
/   * MOVED SCRHT LINES, TOS NOT ON SCREEN, SET TOS
/     TO HALF OF SCRHT LINES BEFORE POINT
SETTOS,	0
	TAD BUF			/ DEFAULT TOS IS BEGINNING OF BUFFER
	DCA NEWTOS
	TAD BUF+1
	DCA NEWTOS+1

	JMS SREVGP
	DCA TOSN		/ ZERO LINE COUNT
	
TOSA,	TAD [NL			/ SEARCH BACK FOR NL
	JMS SREV
	JMP TOSD
	ISZ TOSN		/ UPDATE LINE COUNT

	TAD [SRCHP		/ IF WE FOUND THE TOS, WE'RE DONE
	JMS INC15
	TAD [SRCHP
	MQL
	TAD [TOS
	JMS SNE15
	JMP I SETTOS

	TAD TOSN		/ SAVE A GOOD TOS IF WE NEED IT
	TAD (-HALFHT
	SZA CLA
	JMP TOSB
	TAD SRCHP
	DCA NEWTOS
	TAD SRCHP+1
	DCA NEWTOS+1

TOSB,	TAD TOSN		/ GONE BACK SCRHT LINES?
	TAD [-TXTHT
	SNA CLA
	JMP TOSC
	TAD [SRCHP		/ NO, UNDO THE INC15 AND KEEP LOOKING
	JMS DEC15
	JMP TOSA

TOSD,	TAD [TOS		/ COULDN'T FIND ANY NL, TOS ALREADY
	MQL 			/ AT BEGI
	TAD [BUF
	JMS SNE15
	JMP I SETTOS		/ YES, DONE

TOSC,	TAD NEWTOS		/ SET NEW TOS
	DCA TOS
	TAD NEWTOS+1
	DCA TOS+1
	JMP I SETTOS
	
TOSN,	0	
NEWTOS,	0; 0

/ FORWARD ONE SCREEN.
FWDSCR,	0
	TAD CURROW		/ COMPUTE NUMBER OF LINES TO MOVE
	TAD (-TXTHT-HALFHT+1
	DCA TOSN
	JMS SFWDPT
FWSCA,	TAD [NL			/ NEXT LINE
	JMS SFWD
	JMP FWSCB
	TAD [SRCHP		/ SKIP OVER NL
	JMS INC15
	ISZ TOSN		/ MOVED FAR ENOUGH?
	JMP FWSCA

	JMS GOFWD		/ YES, GO THERE
FWSCC,	ISZ FWDSCR
	JMP I FWDSCR

FWSCB,	TAD TOSN		/ NO NL, IF CURRENT LINE IS NOT
	TAD (HALFHT-1		/ ON SCREEN, MOVE TO END
	SPA CLA
	JMP I FWDSCR
	JMS GOEND
	HLT
	JMP FWSCC

/ REVERSE ONE SCREEN
REVSCR,	0
	TAD CURROW		/ COMPUTE NUMBER OF LINES TO MOVE
	CIA
	TAD (-HALFHT-1
	DCA TOSN
	JMS SREVGP
RVSCA,	TAD [NL			/ PREVIONS LINE
	JMS SREV
	JMP RVSCB
	ISZ TOSN		/ MOVED FAR ENOUGH?
	JMP RVSCA

	TAD [SRCHP		/ YES, SKIP OVER NL
	JMS INC15
	JMS GOREV		/ GO THERE
RVSCC,	ISZ REVSCR
	JMP I REVSCR

RVSCB,	TAD [TOS		/ CAN'T FIND NL, TOS == BUF?
	MQL
	TAD [BUF
	JMS SNE15
	JMP I REVSCR
	JMS GOBEG		/ YES, GO TO BEGINNING
	HLT
	JMP RVSCC

	PAGE  /-------------------------- 2600

/ SKIP IF AC IS ALPHANUMERIC
SKIPAN,	0
	JMS UPPER
	DCA SKANCH
	TAD SKANCH
	TAD (-60		/ NUMERIC?
	SPA CLA
	JMP SKNAB
	TAD SKANCH
	TAD (-72
	SPA CLA
	JMP SKANA

SKNAB,	TAD SKANCH		/ NO, ALPHA?
	TAD (-101
	SPA CLA
	JMP I SKIPAN
	TAD SKANCH
	TAD (-133
	SPA CLA

SKANA,	ISZ SKIPAN
	JMP I SKIPAN

SKANCH,	0

/ CONVERT 6-BIT ASCII TO 8-BIT
CV68,	 0
	 TAD (40
	 AND (77
	 TAD (40
	 JMP I CV68

/ WRITE 6-BIT STRING TO SUBROUTINE
WR6,	0
	DCA WR6P
	TAD I WR6
	ISZ WR6
	DCA WR6SUB

WR6A,	TAD I WR6P		/ FIRST CHAR
	LSR; 5
	SNA
	JMP I WR6
	JMS CV68
	JMS I WR6SUB

	TAD I WR6P		/ SECOND CHAR
	AND (77
	SNA
	JMP I WR6
	JMS CV68
	JMS I WR6SUB
	ISZ WR6P
	JMP WR6A

WR6P,	0
WR6SUB,	0

/ ERASE SCREEN, SET TOS SO THAT CURSOR IS IN MIDDLE OF SCREEN
REDRAW,	0
	JMS SCINIT		/ ERASE
	ISZ REDRAW		/ CAN'T FAIL
	TAD (-HALFHT		/ COUNT LINES
	DCA REDRN
	JMS SREVGP

REDRA,	TAD [NL			/ BACK HALF-SCREEN OF LINES
	JMS SREV
	JMP REDRB
	ISZ REDRN
	JMP REDRA

	TAD [SRCHP		/ SKIP OVER NL
	JMS INC15
	TAD SRCHP		/ SET TOS
	DCA TOS
	TAD SRCHP+1
	DCA TOS+1
	JMP I REDRAW

REDRB,	TAD BUF			/ NL NOT FOUND, TOS = BUF
	DCA TOS
	TAD BUF+1
	DCA TOS+1
	JMP I REDRAW

REDRN,	0

/ DELETE CHARS FROM POINT TO END OF LINE. IF NONE, DELETE
/ NL. FAILS IF NOTHING WAS DELETED (AT END OF BUFFER)
KEOL,	 0
	 JMS SFWDPT		/ FIND EOL
	 TAD [NL
	 JMS SFWD
	 JMP KEOLA

	 TAD [POINT		/ IF AT EOL, DELETE THE NL
	 MQL
	 TAD [SRCHP
	 JMS SNE15
	 SKP
	 JMP KEOLC
	 TAD (SRCHP
	 JMS INC15

KEOLC,	 TAD SRCHP		/ DO THE DELETE
	 DCA POINT
	 TAD SRCHP+1
	 DCA POINT+1

KEOLB,	 ISZ KEOL		/ NORMAL RETURN, SET CHANGED
	 STA
	 DCA CHANGD
	 JMP I KEOL

KEOLA,	 TAD [POINT		/ LAST LINE, ANYTHING TO DELETE?
	 MQL
	 TAD [BUFEND
	 JMS SNE15
	 JMP I KEOL
	 TAD BUFEND		/ YES, DO IT
	 DCA POINT
	 TAD BUFEND+1
	 DCA POINT+1
	 JMP KEOLB

	PAGE  /-------------------------- 3000

/ MODE LINE TEXT
MLTP,	0

/ CLEAR MLT
CLRMLT,	0
	TAD (MLTBUF
	DCA MLTP
	DCA I MLTP
	JMP I CLRMLT

/ WRITE CHARACTER TO MLT, IGNORE IF BUFFER FULL
WRMLT,	0
	DCA I MLTP
	TAD MLTP
	TAD (-MLTEND+1
	SZA CLA
	ISZ MLTP
	DCA I MLTP
	JMP I WRMLT

/ ERASE CHARACTER FROM MLT, IGNORE IF BUFFER EMPTY
ERMLT,	0
	TAD MLTP
	TAD (-MLTBUF
	SNA CLA
	JMP I ERMLT
	STA
	TAD MLTP
	DCA MLTP
	DCA I MLTP
	JMP I ERMLT

/ RENDER MLT
RNDMLT,	0
	JMS RNDINI
	TAD (MLTBUF
	DCA MLTP

RMLTA,	TAD I MLTP		/ RENDER EACH CHAR
	SNA
	JMP RMLTB
	JMS RENDCH
	ISZ MLTP
	JMP RMLTA

RMLTB,	JMS RNDEND
	JMP I RNDMLT
