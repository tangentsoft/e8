/#E8# OS/8 EMACS CORE FUNCTIONS

BELL=7		/ SPECIAL CHARACTERS
TAB=11
LF=12
CR=15
ESC=33
SP=40
BS=10

/ NEW LINE IN BUFFER. GENERALLY CAN BE ANY CONTROL CHAR,
/ BUT THERE IS ONE PLACE (INSF1) THAT ASSUMES IT'S CR: IN
/ FILE INPUT TO CONVERT CR/LF TO NL BY DISCARDING LF.
NL=CR

MUY=7405	/ EAE
DVI=7407
SHL=7413
ASR=7415
LSR=7417
CAM=7621
SWP=7521

/ DISPLAY SCREEN DIMENSIONS. WD * (HT+1) MUST BE < 3968 TO AVOID
/ RUNNING INTO OS/8 USE OF LAST PAGE OF FIELD 1
	DECIMAL
SCRWD=80
SCRHT=42
TXTHT=SCRHT-2	/ SCREEN HEIGHT MINUS MODE LINES
	OCTAL	

/ FIELD DEFINITIONS
BUFFLD=CDF 20	/ TEXT BUFFER START
ENDFLD=CDF+100	/ TEXT BUFFER END
CODFLD=CDF 0	/ CODE
SCRFLD=CDF 10	/ SCREEN COPY

/ PAGE 0
	*20
BUF,	0; BUFFLD	/ START OF TEXT BUFFER
BUFEND,	0; ENDFLD	/ END OF TEXT BUFFER
POINT,	0; ENDFLD	/ INSERT/DELETE POINT (END OF GAP)
MARK,	0; BUFFLD	/ SEE COMMENTS IN EE.PA
TOS,	0; BUFFLD	/ TOP OF SCREEN
GAP,	0; BUFFLD	/ START OF GAP
SRCHP,	0; 0		/ SEARCH POINTER

CHANGD,	0  		/ NON-ZERO IF FILE HAS CHANGED
MLHOLD,	0		/ HOLD MODE LINE FOR ONE CYCLE
MKFLAG,	0		/ MARK BEFORE (0) OR AFTER (1) POINT
AC24,	0; 0		/ 24-BIT ACCUMULATOR

/ A ZONE (ENTIRE BUFFER OR JUST REGION) FOR WRITING TO A FILE
WRBEG,	0	/ POINTER TO 15-BIT BEGINNING BELOW GAP
WREND,	0	/ POINTER TO 15-BIT END ABOVE POINT
WRNAME,	0	/ POINTER TO FILENAME
WRSIZE,	0	/ FILE SIZE IN OS/8 BLOCKS (256 WORDS)

/ VARIABLES NEED FOR SCREEN UPDATE. ON PAGE 0 SINCE THE CODE SPANS
/ MULTIPLE PAGES
ROW,	0	/ SCREEN POSITION DURING UPDATE
COL,	0
CURROW,	0	/ POSITION OF POINT (CURSOR) FOUND DURING UPDATE
CURCOL,	0
BUFP,	0; 0	/ POINTER INTO BUFFER
SCRP,	0  	/ POINTER INTO SCREEN COPY IN FIELD 1
RNDP,	0	/ POINTER INTO RENDER BUFFER IN FIELD 1

/ TEMP REGISTERS USED BY 15-BIT ADDRESS ROUTINES
A15,	0
B15,	0
C15,	0

/ LARGE COMMON LITERAL TABLE HERE

/ TOP LEVEL
	*200	/------------
	TLS
	JMS SCINIT
	JMS IOINIT
	JMP 7600	/ FILE SYS ERR, QUIT

TOP,	TAD MLHOLD	/ CLEAR MODE LINE TEXT UNLESS BEING HELD
	SNA CLA
	JMS CLRMLT
	DCA MLHOLD
	JMS FIXMRK	/ FIX MARK IF NECESSARY
	JMS UPDATE	/ UPDATE SCREEN

	JMS RDTTY	/ GET AND PROCESS CHAR INPUT
	TAD [-SP
	SPA
	JMP CTRL
	
	TAD [SP		/ NORMAL CHARACTER, INSERT
	JMS INSERT
	JMP ERR
	JMP TOP

/ CONTROL CHAR
CTRL,	TAD [SP
	TAD (CTABLE
ALTEX,	DCA CMD
	TAD I CMD
	SNA
	JMP ERR
	DCA CMD
	JMS I CMD
	JMP ERR
	JMP TOP

/ ERROR
ERR,	TAD (BELL
	JMS WRTTY
	JMP TOP

/ ALT PREFIX (ESCAPE SEQUENCE START)
ALTPRE,	0
	JMS RDTTY
	JMS UPPER
	TAD [-SP
	SMA
	JMP ALTA
	CLA
	JMP I ALTPRE
ALTA,	TAD (ALTTBL
	JMP ALTEX

/ ^X COMMANDS. CONTROL, UPPER, AND LOWER CASE LETTERS ARE ALL
/ THE SAME, DUE TO SOME CONTROL CHARS BEING INTERCEPTED BY
/ LINUX, MOBAXTERM, OR SIM
CTRLX,	0
	TAD (30
	JMS WRMLT
	JMS UPDATE
	
	JMS RDTTY
	AND (37
	TAD (XTABLE
	JMP ALTEX

CMD,	0

/ SOME CONTROL CHARS ARE JUST INSERTED
INSTAB,	0
	TAD [TAB
	JMS INSERT
	SKP
	ISZ INSTAB
	JMP I INSTAB

NEWLN,	0
	TAD [NL
	JMS INSERT
	SKP
	ISZ NEWLN
	JMP I NEWLN

/ LF = NL, TAB
NLTAB,	0
	JMS NEWLN
	JMP I NLTAB
	JMS INSTAB
	JMP I NLTAB
	ISZ NLTAB
	JMP I NLTAB

/ READ QUOTED CHARACTER
GETQ,	0
	TAD (21
	JMS WRMLT
	JMS UPDATE
	JMS RDTTY
	JMP I GETQ
	
/ QUOTED INSERT
QUOTE,	0
	JMS GETQ
	JMS INSERT
	SKP
	ISZ QUOTE
	JMP I QUOTE

/ ALT-Q. LIKE ^Q, BUT REGULAR LETTERS ARE INTERPRETED AS CTRL
/ DUE TO SOME CTRL CHARS BEING INTERCEPTED
AQUOTE,	0
	JMS GETQ
	TAD (-100
	SMA
	JMP AQA
	CLA
	JMP I AQUOTE
AQA,	AND (37
	JMS INSERT
	JMP I AQUOTE
	ISZ AQUOTE
	JMP I AQUOTE

/ OPEN NEW LINE
OPEN,	0
	JMS NEWLN
	JMP I OPEN
	JMS BACK
	HLT
	ISZ OPEN
	JMP I OPEN

/ EXIT TO OS/8
EXIT,	0
	JMS OFFER
	JMP I EXIT
	JMS SCINIT
	JMP 7600

	PAGE	/------------

CTABLE,	SETMRK;	BEGLN;	BACK;	0;	DELFWD;	ENDLN;	FWD;	0
	DELREV;	INSTAB;	NLTAB;	KEOL;	REDRAW;	NEWLN;	NXTLN;	OPEN
	PRVLN;	QUOTE;	0;	ISRCH;	0;	0;	FWDSCR;	DELREG
	CTRLX;	YANK;	EXIT;	ALTPRE;	0;	0;	0;	0

ALTTBL,	0;	0;	0;	0;	0;	0;	0;	0
	0;	0;	0;	0;	0;	0;	0;	0
	0;	0;	0;	0;	0;	0;	0;	0
	0;	0;	0;	0;	GOBEG;	0;	GOEND;	0
	0;	BEGLN;	0;	0;	0;	ENDLN;	0;	0
	0;	0;	0;	0;	0;	0;	0;	0
	0;	AQUOTE;	0;	ISRCH;	0;	0;	REVSCR;	WRREG
	0;	0;	0;	0;	0;	0;	0;	0

XTABLE,	0;	0;	0;	0;	0;	0;	FFILE;	0
	0;	INFILE;	0;	0;	0;	0;	0;	0
	0;	0;	RDMORE;	SVFILE;	0;	0;	0;	WRFILE
	EXGPM;	0;	0;	0;	0;	0;	0;	0

	
	PAGE	/------------
/ CHARACTER I/O

RDTTY,	0
	KSF
	JMP .-1
	KRB
	AND (177

	TAD (-177	/ CONVERT DELETE TO BACKSPACE TO HANDLE
	SNA
	TAD (BS-177	
	TAD (177
	JMP I RDTTY

WRTTY,	0
	TSF
	JMP .-1
	TLS
	CLA
	JMP I WRTTY

/ WRITE 0-TERMINATED STRING TO SUBROUTINE WHOSE
/ ADDRESS FOLLOWS JMS
WRSTR,	0
	DCA WRSTRP
	TAD I WRSTR
	DCA WRSUB
	ISZ WRSTR
	
WRSTRA,	TAD I WRSTRP
	SNA
	JMP I WRSTR
	ISZ WRSTRP
	JMS I WRSUB
	JMP WRSTRA
WRSTRP,	0

/ WRITE AC DECIMAL, UNSIGNED, TO SUBROUTINE WHOSE
/ ADDRESS FOLLOWS JMS
WRDEC,	0
	MQL
	TAD (W10BUF		/ SET UP BUFFER
	DCA W10P
	TAD I WRDEC		/ GET SUBROUTINE
	DCA WRSUB
	ISZ WRDEC

WRDECA,	DVI; 12			/ NEXT DIGIT, REVERSE ORDER
	TAD ["0
	DCA I W10P
	ISZ W10P
	MQA
	SZA CLA
	JMP WRDECA

WRDECB,	STA			/ WRITE DIGITS IN REVERSE
	TAD W10P
	DCA W10P
	TAD I W10P
	JMS I WRSUB
	TAD W10P
	TAD (-W10BUF
	SZA CLA
	JMP WRDECB

	JMP I WRDEC

W10P,	0
W10BUF,	ZBLOCK 4
WRSUB,	0

/ WRITE AC DECIMALOCTAL, UNSIGNED, TO SUBROUTINE WHOSE
/ ADDRESS FOLLOWS JMS. SUBROUTINE MUST RESTORE MQ,
/ WHICH IS NOT REALLY GOOD PRACTICE
WROCT,	0
	MQL
	TAD I WROCT
	DCA WRSUB
	ISZ WROCT
	TAD (-4
	DCA W10P
WROCTA,	SHL; 2
	TAD ["0
	JMS I WRSUB
	ISZ W10P
	JMP WROCTA
	JMP I WROCT

/ INSERT AC AT POINT
INSERT,	0
	DCA C15			/ BUFFER FULL (GAP == POINT)?
	TAD [GAP
	MQL
	TAD [POINT
	JMS SNE15
	JMP INSFUL
	ISZ INSERT

	TAD C15			/ NO, CHAR GOES IN GAP
	MQL
	TAD [GAP
	JMS PUT15
	TAD [GAP
	JMS INC15
	STA
	DCA CHANGD
	JMP I INSERT

INSFUL,	TAD (FULMSG		/ BUFFER FULL
	JMS WR6
	WRMLT
	ISZ MLHOLD
	JMP I INSERT
FULMSG,	TEXT / BUFFER FULL!/

	PAGE	/------------

/ 15-BIT POINTERS ARE TWO WORDS, ADDRESS FOLLOWED BY CDF THAT
/ HOLDS FIELD. ADDRESS OF POINTER PASSED IN AC. IF TWO POINTERS
/ ARE NEEDED, ADDRESSES ARE PASSED IN AC, MQ

/ INCREMENT 15-BIT POINTER.
INC15,	0
	DCA A15
	ISZ I A15
	JMP I INC15
	ISZ A15
	TAD I A15
	TAD [10
	DCA I A15
	JMP I INC15
	
/ DECREMENT 15-BIT POINTER
DEC15,	0
	DCA A15
	STA STL
	TAD I A15
	DCA I A15
	SNL
	JMP I DEC15
	ISZ A15
	TAD I A15
	TAD [-10
	DCA I A15
	JMP I DEC15

/ FETCH FROM 15-BIT POINTER
GET15,	0
	DCA A15
	TAD I A15
	DCA B15
	ISZ A15
	TAD I A15
	DCA .+1
	0
	TAD I B15
	CODFLD
	JMP I GET15

/ STORE MQ AT 15-BIT POINTER
PUT15,	0
	DCA A15
	TAD I A15
	DCA B15
	ISZ A15
	TAD I A15
	DCA .+1
	0
	MQA
	DCA I B15
	CODFLD
	JMP I PUT15

/ SKIP IF TWO 15-BIT POINTERS ARE NOT EQUAL
SNE15,	0
	DCA A15
	CLA MQA
	DCA B15

	TAD I A15
	CIA
	TAD I B15
	SZA CLA
	JMP SNE15A

	ISZ A15
	ISZ B15
	TAD I A15
	CIA
	TAD I B15
	SZA CLA
SNE15A,	ISZ SNE15
	JMP I SNE15

/ MOVE POINT FORWARD 1, SKIP IF OK, RETURN CHAR
FWD,	0
	TAD [POINT		/ OK TO MOVE?
	MQL
	TAD [BUFEND
	JMS SNE15
	JMP I FWD
	ISZ FWD			/ YES, SKIP RETURN
	
	TAD [POINT		/ GET CHAR AT POINT
	JMS GET15
	MQL
	TAD [GAP
	JMS PUT15

	TAD [GAP		/ MOVE GAP
	JMS INC15

	TAD [POINT		/ MOVE POINT
	JMS INC15

	JMP I FWD

/ MOVE POINT BACK 1, SKIP IF OK, RETURN CHAR
BACK,	0
	TAD [BUF		/ OK TO MOVE?
	MQL
	TAD [GAP
	JMS SNE15
	JMP I BACK
	ISZ BACK		/ YES, SKIP RETURN

	TAD [POINT		/ MOVE POINT
	JMS DEC15

	TAD [GAP		/ MOVE GAP
	JMS DEC15

	TAD [GAP		/ MOVE CHAR FROM GAP
	JMS GET15
	MQL
	TAD [POINT
	JMS PUT15

	JMP I BACK
